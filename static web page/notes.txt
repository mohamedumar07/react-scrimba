10/12
React

rendering all our markup using react inside markup

root in react -> once place where react will insert everything

createRoot() -> will take a DOM node as an input where all the markups will be stuffed inside


When you might not want a framework:

	-> small project
	-> Network Load Concern
	-> Learning Curve
	-> Maintenance concerns
	-> Incompatibility with existing codebase


createElement() of react is somewhat similar to document.createElement()
 
createElement() returns a JS object which is understood by React.


JSX -> HTML inside JS, but stricter than HTML
    -> Has to be inside div tag or empty <> </> wrapper.

React takes the JSX code and uses the createElement.


React is composable
	-> Reusing the code, declaring a custom component and use it wherever needed.
	-> putting together small pieces to build something large.

Composability is achieved through components in react.


Can render a single JSX at a time, which can have as many children as we want.

React Component : Component which returns react element
React element -> JSX Syntax -> createElement -> JS Object -> react interprets them and turn into real DOM element

WorkAround For <div> in Component is to use Fragment In-Built component in React library.

<> </> -> under the hood react implements the fragment for us.


11/12

Parent - Child Components:
	-> Component rendering another component, this forms a tree hierarchy. Which we can call Parent-Child component relationship.
	

Reason to use className in React, rather than the native class:
	Because the react is going to take the JSX and turn them to DOM element, in Vanilla JS if we were to add a className to an element we would use the className property for that element


If we export default something, we can call it by any name in the importing file

Props -> makes our components more reusable.

Similar example to a props would be HTML attribute.

Using props we can pass data to a component.

How to pass data to a component in React?

<ComponentName name="no one" /> -> the name is called props

Destructuring props -> pulling out particular attributes from an object.

To pass any other data type as a prop to a component we surround them with curly brace. 
	Eg: <Joke upvote={10} />

=> React can render arrays.
	-> If we pass {arrayVar} it would generate the arrayVar values but in a concatenated form.

When mapping over an array, we should have key props for each Component in order to make each one unique, like a primary key in DB

	<Joke key= />

Can pass object as prop just as we do with any other data type in React.


-------------------------------------------------------------

Static Web Pages:
	-> Read-only, no user-driven changes to data
	-> Eg: News sites, recipes and blogs etc..,

Dynamic Web Page:
	-> User can read and write
	-> Highly interactive
	-> Displays our data
	-> Eg: Bank Website, Ecommerce sites.



Any of the attributes that we add to our react element will be accessing the actual DOM node, in JS it accesses by the camelCase.



-> Add event listener to JSX just as we do in HTML, difference is we dont call the event listener function by using (), instead just the name would suffice.

=> event.preventDefault() -> prevents the default behaviour of an event.



-> Updating the data, and have react recognize that change and reflect it on the page, useState()

State vs Props:

	=> Props are immutable, should not be changed in the body of the component.

	=> State refers to values that are managed by components.


React will re-render the component on two occasion,
	1) When the passing prop to a component changes.
	2) If the state value inside the component is being changed.


View is function(state) in react, because as the reaction to each state changes, the view also get changed based on the data(which is state).

useState(value) => when we pass a value to useState, its initial state

the function that is returned from useState() if we call it and provide a new value, it will re-render the page, it will successfully update state and trigger react to re-render.


Directly modifying a state variable is a Big No in react. Like we do using count++

Instead, doing like setCount(count + 1) is okay, because we are providing the new value to the setCount which will then set it to the count state variable, which(setCount) will then update state and re-render the component.


Anytime we are setting a state, we rely on old state by using a callback function in setFunc()


Simply modifying state value does not re-render in React.


Anytime we want to change the state value, we need to use the setFunction












